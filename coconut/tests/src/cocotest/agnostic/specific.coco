from io import StringIO  # type: ignore

from .util import mod  # NOQA


def non_py26_test() -> bool:
    """Tests for any non-py26 version."""
    test: dict = {}
    exec("a = 1", test)
    assert test["a"] == 1
    exec("a = 2", globals(), test)
    assert test["a"] == 2
    test: dict = {}
    exec("b = mod(5, 3)", globals(), test)
    assert test["b"] == 2
    assert 5 .bit_length() == 3
    assert 5 .imag == 0
    return True


def non_py32_test() -> bool:
    """Tests for any non-py32 version."""
    assert {range(8): True}[range(8)]
    assert range(1, 2) == range(1, 2)
    assert range(1, 2) != range(3, 4)
    fakefile = StringIO()
    print("herpaderp", file=fakefile, flush=True)
    assert fakefile.getvalue() == "herpaderp\n"
    return True


def py36_spec_test(tco: bool) -> bool:
    """Tests for any py36+ version."""
    from dataclasses import dataclass
    from typing import Any, Literal

    outfile = StringIO()

    class Console:
        def interpret(self):
            raise NotImplementedError()

    @dataclass
    class PrintLine(Console):
        line: str
        rest: Console

        def interpret(self):
            print(self.line, file=outfile)
            return self.rest.interpret()

    @dataclass
    class ReadLine(Console):
        rest: str -> Console

        def interpret(self):
            return self.rest(input()).interpret()

    @dataclass
    class Return(Console):
        val: Any

        def interpret(self):
            return self.val

    program = PrintLine(
        'what is your name? ',
        ReadLine(
            name -> PrintLine(f'Hello {name}!',
                                   Return(None))
        )
    )  # type: ignore

    if tco:
        p = PrintLine('', Return(None))  # type: ignore
        for _ in range(10000):
            p = PrintLine('', p)  # type: ignore
        p.interpret()  # type: ignore

        assert outfile.getvalue() == "\n" * 10001

    class HasGens[T, U]
    assert HasGens `issubclass` object

    class HasPSpec[**P]
    assert HasPSpec `issubclass` object

    data D1[T](x: T, y: T)  # type: ignore
    assert D1(10, 20).y == 20

    data D2[T: int[]](xs: T)  # type: ignore
    assert D2((10, 20)).xs == (10, 20)

    def myid[T](x: T) -> T = x
    assert myid(10) == 10

    def fst[T](x: T, y: T) -> T = x
    assert fst(1, 2) == 1

    def twople[T, U](x: T, y: U) -> (T; U) = (x, y)
    assert twople(1, 2) == (1, 2)

    def head[T: int[]](xs: T) -> (int; T) = (xs[0], xs)
    def head_[T <= int[]](xs: T) -> (int; T) = (xs[0], xs)
    assert head(range(5)) == (0, range(5)) == head_(range(5))

    def duplicate[T](x: T) -> (T; T) = x, y where:
        y: T = x
    assert duplicate(10) == (10, 10)

    class HasStr[T <= str]:
        def __init__(self, x: T):
            self.x: T = x

        def get(self) -> T:
            return self.x

    hello: Literal["hello"] = "hello"
    hello = HasStr(hello).get()

    return True


def py37_spec_test() -> bool:
    """Tests for any py37+ version."""
    import asyncio, typing
    assert py_breakpoint
    ns: typing.Dict[str, typing.Any] = {}
    exec("""async def toa(it):
    for x in it:
        yield x""", ns)
    toa = ns["toa"]
    exec("""async def aconsume(it):
    async for x in it:
        pass""", ns)
    aconsume = ns["aconsume"]
    l: typing.List[int] = []
    range(10) |> toa |> fmap$(l.append) |> aconsume |> asyncio.run
    assert l == list(range(10))
    class HasVarGen[*Ts]  # type: ignore
    assert HasVarGen `issubclass` object
    return True


def py38_spec_test() -> bool:
    """Tests for any py38+ version."""
    from itertools import accumulate
    assert range(5) |> accumulate$(?, (+), initial=10) |> list == [10, 10, 11, 13, 16, 20]
    return True
