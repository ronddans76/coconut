from io import StringIO  # type: ignore

from .util import mod  # NOQA


def non_py26_test() -> bool:
    """Tests for any non-py26 version."""
    test: dict = {}
    exec("a = 1", test)
    assert test["a"] == 1
    exec("a = 2", globals(), test)
    assert test["a"] == 2
    test: dict = {}
    exec("b = mod(5, 3)", globals(), test)
    assert test["b"] == 2
    assert 5 .bit_length() == 3
    assert 5 .imag == 0
    return True


def non_py32_test() -> bool:
    """Tests for any non-py32 version."""
    assert {range(8): True}[range(8)]
    assert range(1, 2) == range(1, 2)
    assert range(1, 2) != range(3, 4)
    fakefile = StringIO()
    print("herpaderp", file=fakefile, flush=True)
    assert fakefile.getvalue() == "herpaderp\n"
    return True


def py36_spec_test(tco: bool) -> bool:
    """Tests for any py36+ version."""
    from dataclasses import dataclass
    from typing import Any

    outfile = StringIO()

    class Console:
        def interpret(self):
            raise NotImplementedError()

    @dataclass
    class PrintLine(Console):
        line: str
        rest: Console

        def interpret(self):
            print(self.line, file=outfile)
            return self.rest.interpret()

    @dataclass
    class ReadLine(Console):
        rest: str -> Console

        def interpret(self):
            return self.rest(input()).interpret()

    @dataclass
    class Return(Console):
        val: Any

        def interpret(self):
            return self.val

    program = PrintLine(
        'what is your name? ',
        ReadLine(
            name -> PrintLine(f'Hello {name}!',
                                   Return(None))
        )
    )  # type: ignore

    if tco:
        p = PrintLine('', Return(None))  # type: ignore
        for _ in range(10000):
            p = PrintLine('', p)  # type: ignore
        p.interpret()  # type: ignore

        assert outfile.getvalue() == "\n" * 10001

    return True


def py37_spec_test() -> bool:
    """Tests for any py37+ version."""
    assert py_breakpoint
    return True


def py38_spec_test() -> bool:
    """Tests for any py38+ version."""
    from itertools import accumulate
    assert range(5) |> accumulate$(?, (+), initial=10) |> list == [10, 10, 11, 13, 16, 20]
    return True
