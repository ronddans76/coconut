from __future__ import division

def non_strict_test() -> bool:
    """Performs non --strict tests."""
    assert (lambda x: x + 1)(2) == 3;
    assert u"abc" == "a" \
        "bc"
    found_x = None
    match 1, 2:  # type: ignore
        case x, 1:
            assert False
        case (x, 2) + tail:  # type: ignore
            assert not tail
            found_x = x
        case _:
            assert False
    else:
        assert False
    assert found_x == 1
    big_d = {"a": 1, "b": 2}
    match big_d:
        case {"a": a}:
            assert a == 1
    else:
        assert False
    class A(object):  # type: ignore
        CONST = 10
        def __init__(self, x):
            self.x = x
    a1 = A(1)
    match a1:  # type: ignore
        case A(x=1):
            pass
    else:
        assert False
    match [A.CONST] in [10]:  # type: ignore
        pass
    else:
        assert False
    match A.CONST in 11:  # type: ignore
        assert False
    assert A.CONST == 10
    match {"a": 1, "b": 2}:  # type: ignore
        case {"a": a}:
            pass
        case _:
            assert False
    assert a == 1  # type: ignore
    x is int = 10
    assert x == 10
    =x = 10
    x is int is int = 5
    assert x == 5
    try:
        x is int is str = x
    except MatchError:
        pass
    else:
        assert False
    match def kwd_only_x_is_int_def_0(*, x is int = 0) = x
    assert kwd_only_x_is_int_def_0() == 0 == kwd_only_x_is_int_def_0(x=0)
    try:
        kwd_only_x_is_int_def_0(1)
    except MatchError:
        pass
    else:
        assert False
    case 1:
        match 1:
            pass
    else:
        assert False
    def weird_func(f:lambda g=->_:g=lambda h=->_:h) = f  # type: ignore
    assert weird_func()()(5) == 5
    return True

if __name__ == "__main__":
    assert non_strict_test()
