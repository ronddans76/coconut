from coconut.__coconut__ import consume as coc_consume  # type: ignore

from coconut.constants import (
    IPY,
    PY2,
    PY34,
    PY35,
    WINDOWS,
    PYPY,
)  # type: ignore
from coconut.exceptions import (
    CoconutSyntaxError,
    CoconutStyleError,
    CoconutTargetError,
    CoconutParseError,
)  # type: ignore
from coconut.convenience import (
    CoconutException,
    cmd,
    version,
    setup,
    parse,
    coconut_eval,
)

if IPY and not WINDOWS:
    if PY35:
        import asyncio  # type: ignore
    from coconut.icoconut import CoconutKernel  # type: ignore
else:
    CoconutKernel = None  # type: ignore

def assert_raises(c, exc, not_exc=None, err_has=None):
    """Test whether callable c raises an exception of type exc."""
    try:
        c()
    except exc as err:
        if not_exc is not None:
            assert not isinstance(err, not_exc), f"{err} instance of {not_exc}"
        if err_has is not None:
            assert err_has in str(err), f"{err_has!r} not in {err}"
    except BaseException as err:
        raise AssertionError(f"got wrong exception {err} (expected {exc})")
    else:
        raise AssertionError(f"{c} failed to raise exception {exc}")

def unwrap_future(maybe_future):
    """
    If the passed value looks like a Future, return its result, otherwise return the value unchanged.

    This is needed for the CoconutKernel test to be compatible with ipykernel version 5 and newer,
    where IPyKernel.do_execute is a coroutine.
    """

    if hasattr(maybe_future, 'result') and callable(maybe_future.result):
        return maybe_future.result()
    return maybe_future

def test_extras():
    if IPY:
        import coconut.highlighter  # type: ignore
    assert consume(range(10), keep_last=1)[0] == 9 == coc_consume(range(10), keep_last=1)[0]
    assert version() == version("num")
    assert version("name")
    assert version("spec")
    assert version("tag")
    assert version("-v")
    assert_raises(-> version("other"), CoconutException)
    assert_raises(def -> raise CoconutException("derp").syntax_err(), SyntaxError)
    assert coconut_eval("x -> x + 1")(2) == 3
    assert coconut_eval("addpattern")
    assert parse("abc") == parse("abc", "sys")
    assert parse("abc", "file")
    assert parse("abc", "package")
    assert parse("abc", "block") == "abc\n" == parse("abc", "single")
    assert parse("abc", "eval") == "abc" == parse(" abc", "eval")
    assert parse("abc", "any") == "abc"
    assert parse("x |> map$(f)", "any") == "(map)(f, x)"
    assert "_coconut" not in parse("a |> .b |> .m() |> f$(x) |> .[0]", "block")
    assert parse("abc # derp", "any") == "abc  # derp"
    assert_raises(-> parse(" abc", "file"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("'"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("("), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("\\("), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("if a:\n  b\n c"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("$"), CoconutParseError)
    assert_raises(-> parse("_coconut"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("range(1,10) |> reduce$(*, initializer = 1000) |> print"), CoconutParseError)
    assert parse("def f(x):\n \t pass")
    assert parse("lambda x: x")
    assert parse("u''")
    assert parse("def f(x):\\\n pass")
    assert parse("abc ")
    assert parse("abc # derp", "any") == "abc  # derp"
    setup(line_numbers=True)
    assert parse("abc", "any") == "abc  # line 1"
    setup(keep_lines=True)
    assert parse("abc", "any") == "abc  # abc"
    setup(line_numbers=True, keep_lines=True)
    assert parse("abc", "any") == "abc  # line 1: abc"
    setup()
    assert "Deprecated feature 'prepattern' disabled by --strict compilation" not in parse("\n", mode="file")
    assert "Deprecated feature 'datamaker' disabled by --strict compilation" not in parse("\n", mode="file")
    setup(strict=True)
    assert "Deprecated feature 'prepattern' disabled by --strict compilation" in parse("\n", mode="file")
    assert "Deprecated feature 'datamaker' disabled by --strict compilation" in parse("\n", mode="file")
    assert_raises(-> parse("def f(x):\n \t pass"), CoconutStyleError)
    assert_raises(-> parse("lambda x: x"), CoconutStyleError)
    assert_raises(-> parse("u''"), CoconutStyleError)
    assert_raises(-> parse("def f(x):\\\n pass"), CoconutStyleError)
    assert_raises(-> parse("abc "), CoconutStyleError)
    assert_raises(-> parse("abc", "file"), CoconutStyleError)
    assert_raises(-> parse("a=1;"), CoconutStyleError)
    assert_raises(-> parse("class derp(object)"), CoconutStyleError)
    assert_raises(-> parse("def f(a.b) = True"), CoconutStyleError)
    setup()
    assert_raises(-> cmd("-f"), SystemExit)
    assert_raises(-> cmd("-pa ."), SystemExit)
    assert_raises(-> cmd("-n . ."), SystemExit)
    assert_raises(-> parse("f$()"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("f(*x, y)"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("def f(x) = return x"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("def f(x) =\n return x"), CoconutSyntaxError, not_exc=CoconutParseError)
    assert_raises(-> parse("a := b"), CoconutParseError)
    assert_raises(-> parse("(a := b)"), CoconutTargetError)
    assert_raises(-> parse("1 + return"), CoconutParseError)
    assert_raises(-> parse("return = 1"), CoconutParseError, err_has="invalid use of the keyword")
    assert_raises(-> parse("if a = b: pass"), CoconutParseError, err_has="misplaced assignment")
    assert_raises(-> parse("if a == b"), CoconutParseError, err_has="misplaced newline")
    assert_raises(-> parse('f"Black holes {*all_black_holes} and revelations"'), CoconutSyntaxError, err_has="format string")
    setup(target="2.7")
    assert parse("from io import BytesIO", mode="any") == "from io import BytesIO"
    assert_raises(-> parse("def f(*, x=None) = x"), CoconutTargetError)
    setup(target="3.3")
    gen_func_def = """def f(x):
    yield x
    return x"""
    assert parse(gen_func_def, mode="any") == gen_func_def
    setup(target="3.2")
    assert parse(gen_func_def, mode="any") != gen_func_def
    setup(target="3.6")
    assert parse("def f(*, x=None) = x")
    setup(target="3.8")
    assert parse("(a := b)")
    assert parse("print(a := 1, b := 2)")
    assert parse("def f(a, /, b) = a, b")
    if CoconutKernel is not None:
        if PY35:
            asyncio.set_event_loop(asyncio.new_event_loop())
        k = CoconutKernel()
        exec_result = k.do_execute("derp = pow$(?, 2)", False, True, {"two": "(+)(1, 1)"}, True) |> unwrap_future
        assert exec_result["status"] == "ok"
        assert exec_result["user_expressions"]["two"]["data"]["text/plain"] == "2"
        assert k.do_is_complete("if abc:")["status"] == "incomplete"
        assert k.do_is_complete("f(")["status"] == "incomplete"
        assert k.do_is_complete("abc")["status"] == "complete"
        inspect_result = k.do_inspect("derp", 4, 0)
        assert inspect_result["status"] == "ok"
        assert inspect_result["found"]
        assert inspect_result["data"]["text/plain"]
        complete_result = k.do_complete("der", 1)
        assert complete_result["status"] == "ok"
        assert "derp" in complete_result["matches"]
        assert complete_result["cursor_start"] == 0
        assert complete_result["cursor_end"] == 1
        keyword_complete_result = k.do_complete("ma", 1)
        assert keyword_complete_result["status"] == "ok"
        assert "match" in keyword_complete_result["matches"]
        assert "map" in keyword_complete_result["matches"]
        assert keyword_complete_result["cursor_start"] == 0
        assert keyword_complete_result["cursor_end"] == 1
    if not PYPY and (PY2 or PY34):
        import numpy as np
        assert np.all(fmap(-> _ + 1, np.arange(3)) == np.array([1, 2, 3]))
    print("<success>")

if __name__ == "__main__":
    print("Expect Coconut errors below from running extras:")
    print("(but make sure you get a <success> after them)")
    test_extras()
