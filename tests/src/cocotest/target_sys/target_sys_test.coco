import os
import sys
import platform

TEST_ASYNCIO = platform.python_implementation() != "PyPy" or os.name != "nt" and sys.version_info >= (3,)

def target_sys_test():
    """Performs --target sys tests."""
    if TEST_ASYNCIO:
        import asyncio
        async def async_map_0(args):
            return parallel_map(args[0], *args[1:])
        async def async_map_1(args) = parallel_map(args[0], *args[1:])
        async def async_map_2([func] + iters) = parallel_map(func, *iters)
        async match def async_map_3([func] + iters) = parallel_map(func, *iters)
        match async def async_map_4([func] + iters) = parallel_map(func, *iters)
        async def async_map_test() =
            for async_map in (async_map_0, async_map_1, async_map_2, async_map_3, async_map_4):
                assert (await ((pow$(2), range(5)) |> async_map)) |> tuple == (1, 2, 4, 8, 16)
            True
        async def main():
            assert await async_map_test()
        loop = asyncio.new_event_loop()
        loop.run_until_complete(main())
        loop.close()
    else:
        assert platform.python_implementation() == "PyPy"
        assert os.name == "nt" or sys.version_info < (3,)
    return True
